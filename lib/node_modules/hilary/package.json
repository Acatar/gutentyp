{
  "name": "hilary",
  "version": "2.2.1",
  "description": "a simple Dependency Injection (DI) library that provides Inversion of Control (IoC) capabilities in Node.js and the browser",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Acatar/hilaryjs.git"
  },
  "keywords": [
    "dependency",
    "injection",
    "injector",
    "inversion",
    "control",
    "IoC",
    "DI",
    "node",
    "javascript",
    "autowire",
    "configuration",
    "low",
    "ceremony"
  ],
  "author": {
    "name": "&y",
    "email": "andes.collab@gmail.com",
    "url": "https://github.com/losandes"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Acatar/hilaryjs/issues"
  },
  "homepage": "https://github.com/Acatar/hilaryjs",
  "readme": "hilary.js\n========\n\nHilary is an easy to use JavaScript Inversion of Control (IoC) container written for Node.js and the browser.  Hilary's aim is to deliver low-ceremony dependency injection (DI), to aid in decoupling JavaScript modules and testing.  It's named after Hilary Page, who designed building blocks that later became known as Legos.\n\nYou can find documentation and examples on our [wiki](https://github.com/Acatar/hilaryjs/wiki). Below is just a quick-start.\n\n> Hilary 2.0 is not backwards compatible with previous versions of Hilary. We don't intend to release a backwards compatibility extension because v1 was in the wild for such a short time. If you already built a lot around v1, open an issue, and we will help you with compatibility/upgrades.\n\nCreating your First Node App with Hilary\n========\nInstall Hilary:\n\n```\nnpm install hilary\n```\n\nIn your startup file, require Hilary, create a new scope, and compose your app.\n\n```JavaScript\n// startup.js\n\"use strict\";\n\nvar compose,\n    start;\n\ncompose = function (scope) {\n    scope.register({\n        name: 'http',\n        factory: function () {\n            var isWin = /^win/.test(process.platform);\n            \n            if (isWin) {\n                // take advantage of the httpsys performance enhancements\n                return require('httpsys').http();\n            } else {\n                // otherwise, stick with the standard http module\n                return require('http');\n            }\n        }\n    });\n    scope.register(require('./www.js'));\n};\n\nstart = function () {\n    var Hilary = require('hilary'),\n        scope = Hilary.scope('app');\n    \n    compose(scope);\n    scope.resolve('server');\n};\n\nstart();\n\n```\n\n```JavaScript\n// www.js\nmodule.exports.name = 'server';\nmodule.exports.dependencies = ['http'];\nmodule.exports.factory = function (http) {\n    \"use strict\";\n    \n    http.createServer(function (req, res) {\n        res.writeHead(200, {'Content-Type': 'text/plain'});\n        res.end('Hello World\\n');\n    }).listen(1337, '127.0.0.1');\n\n    console.log('Server running at http://127.0.0.1:1337/');\n    \n    return http;\n};\n```\n\nCreating your First Browser App with Hilary\n========\nInstall Hilary (or you can download the source):\n\n```\nbower install hilary\n```\n\nAdd a script reference to Hilary before you load your modules:\n\n```HTML\n<script src=\"hilary.min.js\"></script>\n```\n\nThen register modules on a named scope, and finally compose your app:\n\n```JavaScript\n// myRouteEngine.js\nHilary.scope('spa').register({\n    name: 'myRouteEngine',\n    dependencies: ['myFactory'],\n    factory: function (myFactory) {\n        \"use strict\";\n\n        // [CODE]\n    }\n});\n```\n\n```JavaScript\n// bootstrapper.js\n(function (spa) {\n    \"use strict\";\n    \n    var compose;\n    \n    compose = function () {\n        spa.register({\n            name: 'myFactory',\n            factory: function () {\n                \"use strict\";\n\n                // [CODE]\n            }\n        });\n    };\n    \n    // start\n    (function () {\n        compose();\n        spa.resolve('myRouteEngine');\n    }());\n    \n}(Hilary.scope('spa')));\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "6cf8678b9eae85c4625d1f421e8600c6e01948fc",
  "_id": "hilary@2.2.1",
  "_shasum": "59c1a1023fc0f5e9c727032669659fc701d8191d",
  "_from": "hilary@*"
}
